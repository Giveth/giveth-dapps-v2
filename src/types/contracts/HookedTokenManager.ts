/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface HookedTokenManagerInterface extends utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "MAX_VESTINGS_PER_ADDRESS()": FunctionFragment;
    "spendableBalanceOf(address)": FunctionFragment;
    "wrappableToken()": FunctionFragment;
    "assignVested(address,uint256,uint64,uint64,uint64,bool)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getVesting(address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "CHANGE_CONTROLLER_ROLE()": FunctionFragment;
    "onTransfer(address,address,uint256)": FunctionFragment;
    "forwarderType()": FunctionFragment;
    "registerHook(address)": FunctionFragment;
    "transferableBalance(address,uint256)": FunctionFragment;
    "hooksLength()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "ISSUE_ROLE()": FunctionFragment;
    "hooks(uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "vestingsLengths(address)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "ASSIGN_ROLE()": FunctionFragment;
    "revokeHook(uint256)": FunctionFragment;
    "BURN_ROLE()": FunctionFragment;
    "assign(address,uint256)": FunctionFragment;
    "canForward(address,bytes)": FunctionFragment;
    "issue(uint256)": FunctionFragment;
    "kernel()": FunctionFragment;
    "changeTokenController(address)": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "onApprove(address,address,uint256)": FunctionFragment;
    "unwrap(uint256)": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "MINT_ROLE()": FunctionFragment;
    "wrap(uint256)": FunctionFragment;
    "maxAccountTokens()": FunctionFragment;
    "REVOKE_VESTINGS_ROLE()": FunctionFragment;
    "initialize(address,address,bool,uint256)": FunctionFragment;
    "proxyPayment(address)": FunctionFragment;
    "SET_HOOK_ROLE()": FunctionFragment;
    "WRAP_TOKEN_ROLE()": FunctionFragment;
    "revokeVesting(address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "isForwarder()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VESTINGS_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignVested",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVesting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwarderType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferableBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hooksLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ISSUE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hooks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingsLengths",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ASSIGN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "BURN_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assign",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "issue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeTokenController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MINT_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "wrap", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "maxAccountTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVOKE_VESTINGS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SET_HOOK_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WRAP_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVesting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VESTINGS_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignVested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwarderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hooksLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ISSUE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hooks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingsLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ASSIGN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BURN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onApprove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MINT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAccountTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_VESTINGS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_HOOK_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WRAP_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;

  events: {
    "TokenManagerInitialized(address,address)": EventFragment;
    "NewVesting(address,uint256,uint256)": EventFragment;
    "RevokeVesting(address,uint256,uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenManagerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export type TokenManagerInitializedEvent = TypedEvent<
  [string, string],
  { token: string; wrappableToken: string }
>;

export type TokenManagerInitializedEventFilter =
  TypedEventFilter<TokenManagerInitializedEvent>;

export type NewVestingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { receiver: string; vestingId: BigNumber; amount: BigNumber }
>;

export type NewVestingEventFilter = TypedEventFilter<NewVestingEvent>;

export type RevokeVestingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { receiver: string; vestingId: BigNumber; nonVestedAmount: BigNumber }
>;

export type RevokeVestingEventFilter = TypedEventFilter<RevokeVestingEvent>;

export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  { executor: string; script: string; input: string; returnData: string }
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  { vault: string; token: string; amount: BigNumber }
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface HookedTokenManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HookedTokenManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    MAX_VESTINGS_PER_ADDRESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    spendableBalanceOf(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wrappableToken(overrides?: CallOverrides): Promise<[string]>;

    assignVested(
      _receiver: string,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    getVesting(
      _recipient: string,
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        vesting: BigNumber;
        revokable: boolean;
      }
    >;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forwarderType(overrides?: CallOverrides): Promise<[number]>;

    registerHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferableBalance(
      _holder: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hooksLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowRecoverability(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    hooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingsLengths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    revokeHook(
      _hookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    BURN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    assign(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onApprove(
      _holder: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    MINT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    wrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAccountTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: string,
      _wrappableToken: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxyPayment(
      arg0: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRAP_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    revokeVesting(
      _holder: string,
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;
  };

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  MAX_VESTINGS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

  spendableBalanceOf(
    _holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wrappableToken(overrides?: CallOverrides): Promise<string>;

  assignVested(
    _receiver: string,
    _amount: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _vested: BigNumberish,
    _revokable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  getVesting(
    _recipient: string,
    _vestingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      start: BigNumber;
      cliff: BigNumber;
      vesting: BigNumber;
      revokable: boolean;
    }
  >;

  mint(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

  onTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forwarderType(overrides?: CallOverrides): Promise<number>;

  registerHook(
    _hook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferableBalance(
    _holder: string,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hooksLength(overrides?: CallOverrides): Promise<BigNumber>;

  allowRecoverability(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  ISSUE_ROLE(overrides?: CallOverrides): Promise<string>;

  hooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  vestingsLengths(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    _holder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  ASSIGN_ROLE(overrides?: CallOverrides): Promise<string>;

  revokeHook(
    _hookId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  BURN_ROLE(overrides?: CallOverrides): Promise<string>;

  assign(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canForward(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  changeTokenController(
    _newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forward(
    _evmScript: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onApprove(
    _holder: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  MINT_ROLE(overrides?: CallOverrides): Promise<string>;

  wrap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAccountTokens(overrides?: CallOverrides): Promise<BigNumber>;

  REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: string,
    _wrappableToken: string,
    _transferable: boolean,
    _maxAccountTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxyPayment(
    arg0: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SET_HOOK_ROLE(overrides?: CallOverrides): Promise<string>;

  WRAP_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  revokeVesting(
    _holder: string,
    _vestingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    MAX_VESTINGS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    spendableBalanceOf(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappableToken(overrides?: CallOverrides): Promise<string>;

    assignVested(
      _receiver: string,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    getVesting(
      _recipient: string,
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        start: BigNumber;
        cliff: BigNumber;
        vesting: BigNumber;
        revokable: boolean;
      }
    >;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    forwarderType(overrides?: CallOverrides): Promise<number>;

    registerHook(_hook: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferableBalance(
      _holder: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hooksLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<string>;

    hooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    vestingsLengths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    burn(
      _holder: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<string>;

    revokeHook(_hookId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    BURN_ROLE(overrides?: CallOverrides): Promise<string>;

    assign(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    kernel(overrides?: CallOverrides): Promise<string>;

    changeTokenController(
      _newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forward(_evmScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    onApprove(
      _holder: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unwrap(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    MINT_ROLE(overrides?: CallOverrides): Promise<string>;

    wrap(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    maxAccountTokens(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: string,
      _wrappableToken: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proxyPayment(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<string>;

    WRAP_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    revokeVesting(
      _holder: string,
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "TokenManagerInitialized(address,address)"(
      token?: null,
      wrappableToken?: null
    ): TokenManagerInitializedEventFilter;
    TokenManagerInitialized(
      token?: null,
      wrappableToken?: null
    ): TokenManagerInitializedEventFilter;

    "NewVesting(address,uint256,uint256)"(
      receiver?: string | null,
      vestingId?: null,
      amount?: null
    ): NewVestingEventFilter;
    NewVesting(
      receiver?: string | null,
      vestingId?: null,
      amount?: null
    ): NewVestingEventFilter;

    "RevokeVesting(address,uint256,uint256)"(
      receiver?: string | null,
      vestingId?: null,
      nonVestedAmount?: null
    ): RevokeVestingEventFilter;
    RevokeVesting(
      receiver?: string | null,
      vestingId?: null,
      nonVestedAmount?: null
    ): RevokeVestingEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VESTINGS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    spendableBalanceOf(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappableToken(overrides?: CallOverrides): Promise<BigNumber>;

    assignVested(
      _receiver: string,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    getVesting(
      _recipient: string,
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    CHANGE_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forwarderType(overrides?: CallOverrides): Promise<BigNumber>;

    registerHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferableBalance(
      _holder: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hooksLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    hooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    vestingsLengths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHook(
      _hookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    BURN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    assign(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onApprove(
      _holder: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAccountTokens(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_VESTINGS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _wrappableToken: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxyPayment(
      arg0: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRAP_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    revokeVesting(
      _holder: string,
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VESTINGS_PER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spendableBalanceOf(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignVested(
      _receiver: string,
      _amount: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _vested: BigNumberish,
      _revokable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVesting(
      _recipient: string,
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    CHANGE_CONTROLLER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forwarderType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferableBalance(
      _holder: string,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hooksLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowRecoverability(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ISSUE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingsLengths(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ASSIGN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeHook(
      _hookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    BURN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assign(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeTokenController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onApprove(
      _holder: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAccountTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVOKE_VESTINGS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _wrappableToken: string,
      _transferable: boolean,
      _maxAccountTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxyPayment(
      arg0: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SET_HOOK_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAP_TOKEN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeVesting(
      _holder: string,
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
